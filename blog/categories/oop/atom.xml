<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oop | Stacktrace]]></title>
  <link href="http://tapthaker.github.io/blog/categories/oop/atom.xml" rel="self"/>
  <link href="http://tapthaker.github.io/"/>
  <updated>2015-06-01T10:14:36+05:30</updated>
  <id>http://tapthaker.github.io/</id>
  <author>
    <name><![CDATA[Tapan Thaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing iOS UIViewControllers - the Advanced Way]]></title>
    <link href="http://tapthaker.github.io/blog/2015/05/30/unit-testing-ios-uiviewcontrollers-the-advanced-way"/>
    <updated>2015-05-30T18:44:43+05:30</updated>
    <id>http://tapthaker.github.io/blog/2015/05/30/unit-testing-ios-uiviewcontrollers-the-advanced-way</id>
    <content type="html"><![CDATA[<p><blockquote><p>“Am I suggesting 100% test coverage? No, I’m not suggesting it. I’m demanding it. Every single line of code that you write should be tested. Period.”<br/>― Uncle Bob</p></blockquote></p>

<p>I have already <a href="http://tapthaker.github.io/blog/2015/03/28/unit-testing-ioss-uiviewcontrollers/">written a post on this topic</a>, but after discussing with several colleagues
I have realized that the approach I was talking about might not be scalable. The approach discussed there relied on several hacks like <a href="http://nshipster.com/method-swizzling/">method swizzling</a> which though <strong>cool</strong> could cause some unexpected behaviour.
We were relying on the internal implementation of UIViewControllers which might change anytime when devs at Apple feel like. Plus that approach made us comfortable in writing core business logic inside
UIViewControllers instead of creating a ViewModels for them.</p>

<p>The approach I am going to describe here does not necessarily apply only to UIViewControllers. It can in fact be applied to any MVC pattern implementation. The problem with the current iOS implementation is that
the UIViewController is very tightly coupled with the UIView. So if you want to test a your logic when a particular UIButton is tapped you cannot do that without inflating the whole view hierarchy.</p>

<!-- more -->


<p>The idea is to separate the business logic from the UIViewController to something like <strong>BusinessLogicController</strong>.
The BusinessLogicController should have no reference of UIKit, thus making the code modular and platform independent.
Technically speaking, this means that we aren&rsquo;t testing the UIViewControllers, instead we are moving the core business
out of it into another layer.</p>

<p>The UIViewController implements the <strong>Controllable</strong> protocol which basically has a set of methods -</p>

<ol>
<li><strong>render</strong> : Called to paint something on the screen</li>
<li><strong>getValue</strong>: Called to get the value for a particular key</li>
<li><strong>showAlert</strong>: Optional, called to show an Alert</li>
<li><strong>goToPage</strong>: Optional, called to navigate to another page</li>
<li><strong>property eventable</strong>: To dispatchEvents to the BusinessLogicController</li>
</ol>


<p>The first 4 methods are called by the BusinessLogicController as and when required. The UIViewController
calls the dispatchEvent when a events like button clicked occur to let the BusinessLogicController know
about a particular event.</p>

<p>The BusinessLogicController implements <strong>Eventable</strong> which has the following:</p>

<ol>
<li><strong>dispatchEvent</strong>: called when a particular event like buttonPressed occurs</li>
<li><strong>property controllable</strong>: To call methods on the controllable whenever need be</li>
</ol>


<p>Lets take the example of Login. Lets say you have to code the following scenario -</p>

<ul>
<li>When the username &amp; password are correctly entered take the user to HomeVC.</li>
<li>If the credentials entered are incorrect display the message <em>&ldquo;Incorrect username or password&rdquo;</em>.</li>
<li>Also, if the user exceeds 5 attempts display an alert saying <em>&ldquo;Maximum number of retries exceeded&rdquo;</em>.</li>
</ul>


<p><img align="center" src="/images/diagrams/UnitTestingVC-advanced.png" /></p>

<p>With the above criteria the LoginBusinessLogicController would look something like this -</p>

<p><figure class='code'><figcaption><span>[LoginBusinessLogicController] (LoginBusinessLogicController.swift)</span> <a href='/downloads/code/LoginBusinessLogicController.swift'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">LoginBusinessLogicController</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span><span class="n">Eventable</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">controllable</span><span class="p">:</span> <span class="n">Controllable</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">var</span> <span class="n">numberOfAttempts</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="n">MAXIMUM_NUMBER_OF_ATTEMPTS</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">dispatchEvent</span><span class="p">(</span><span class="nl">eventName</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="bp">NSObject</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">eventName</span><span class="p">){</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;loginButtonPressed&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="n">checkLogin</span><span class="p">()</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;NO SUCH EVENT IMPLEMENTED\(eventName)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">checkLogin</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">numberOfAttempts</span> <span class="o">&lt;</span> <span class="n">MAXIMUM_NUMBER_OF_ATTEMPTS</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">getValue</span><span class="p">(</span><span class="s">&quot;username&quot;</span><span class="p">)</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">password</span> <span class="o">=</span> <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">getValue</span><span class="p">(</span><span class="s">&quot;password&quot;</span><span class="p">)</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">isCorrect</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="n">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">goToPage</span><span class="o">?</span><span class="p">(</span><span class="s">&quot;Home&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="nl">value</span><span class="p">:</span><span class="s">&quot;Wrong username or password&quot;</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">numberOfAttempts</span><span class="o">++</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">showAlert</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;You have exceeded the maximum number of attempts, please try after sometime.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">isCorrect</span><span class="p">(</span><span class="nl">username</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span><span class="nl">password</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">username</span> <span class="o">==</span> <span class="s">&quot;batman&quot;</span> <span class="o">&amp;&amp;</span> <span class="n">password</span> <span class="o">==</span> <span class="s">&quot;bruce&quot;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Notice the it conforms to the Eventable protocol, which declares the method <strong>dispatchEvent</strong>.</p>

<p>To test such BusinessLogicControllers, you can create a StubbedControllable and use that to send events. I am not going
to show the implementation of the StubbedControllable here because it will just bloat the code, if you really want to look
at that you can head on my <a href="https://github.com/tapthaker/UnitTesting-UIViewControllers">Github example repo</a>.
Lets look at how we could implement tests for this -</p>

<p><figure class='code'><figcaption><span>[LoginBusinessLogicControllerTests] (LoginBusinessLogicControllerTests.swift)</span> <a href='/downloads/code/LoginBusinessLogicControllerTests.swift'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">XCTest</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">LoginBusinessLogicControllerTests</span><span class="p">:</span> <span class="n">XCTestCase</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">stubbedControllable</span><span class="p">:</span> <span class="n">StubbedControllable</span><span class="o">!</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">setUp</span><span class="p">()</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">businessController</span> <span class="o">=</span> <span class="n">LoginBusinessLogicController</span><span class="p">()</span>
</span><span class='line'>        <span class="n">stubbedControllable</span> <span class="o">=</span> <span class="n">StubbedControllable</span><span class="p">()</span>
</span><span class='line'>        <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">eventable</span> <span class="o">=</span> <span class="n">businessController</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">enterUsernameAndPassword</span><span class="p">(</span><span class="nl">username</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span><span class="nl">password</span><span class="p">:</span> <span class="n">String</span><span class="p">){</span>
</span><span class='line'>        <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">stubbedGetValue</span><span class="p">.</span><span class="n">updateValue</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;username&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">stubbedGetValue</span><span class="p">.</span><span class="n">updateValue</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;password&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="s">&quot;loginButtonPressed&quot;</span><span class="p">,</span> <span class="nl">eventValue</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">testLoginFailure</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">enterUsernameAndPassword</span><span class="p">(</span><span class="s">&quot;batman&quot;</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="s">&quot;joker&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">lastMessage</span> <span class="o">=</span> <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">lastRender</span><span class="p">[</span><span class="s">&quot;message&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">lastMessage</span><span class="p">,</span> <span class="s">&quot;Wrong username or password&quot;</span><span class="p">,</span> <span class="s">&quot;Should render error message on incorrect password&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">testLoginSuccess</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">enterUsernameAndPassword</span><span class="p">(</span><span class="s">&quot;batman&quot;</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="s">&quot;bruce&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">stubbedControllable</span><span class="p">.</span><span class="n">lastPage</span><span class="o">!</span><span class="p">,</span> <span class="s">&quot;Home&quot;</span><span class="p">,</span> <span class="s">&quot;Should goTo Home when correct password is enterred&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">testMaximumNumberOfRetries</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="mf">.5</span><span class="p">{</span>
</span><span class='line'>            <span class="n">enterUsernameAndPassword</span><span class="p">(</span><span class="s">&quot;batman&quot;</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="s">&quot;joker&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">stubbedControllable</span><span class="p">.</span><span class="n">lastAlert</span><span class="o">!</span><span class="p">,</span> <span class="s">&quot;You have exceeded the maximum number of attempts, please try after sometime.&quot;</span><span class="p">,</span> <span class="s">&quot;Should alert if exceeded maximum number of attempts&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note that neither the LoginBusinessLogicController nor its test is importing the UIKit module. The code written here
is independent of the iOS UIKit Framework which means the tests can run as a separately from the Simulator, faster in-parallel
if need be. As a bonus you can create a new iPad-App or Mac-App with the same BusinessLogicControllers wiring them with new ViewControllers.</p>

<p>I am pretty sure that by now you already have an idea of the LoginViewController&rsquo;s implementation</p>

<p><figure class='code'><figcaption><span>[LoginViewController] (LoginViewController.swift)</span> <a href='/downloads/code/LoginViewController.swift'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">LoginViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span><span class="n">Controllable</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">eventable</span><span class="p">:</span> <span class="n">Eventable</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">labelMessage</span><span class="p">:</span> <span class="bp">UILabel</span><span class="o">!</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">textFieldUsername</span><span class="p">:</span> <span class="bp">UITextField</span><span class="o">!</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">textFieldPassword</span><span class="p">:</span> <span class="bp">UITextField</span><span class="o">!</span>
</span><span class='line'>    <span class="n">required</span> <span class="k">init</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">eventable</span> <span class="o">=</span> <span class="n">LoginBusinessLogicController</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">coder</span><span class="p">:</span> <span class="n">aDecoder</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">eventable</span><span class="p">.</span><span class="n">controllable</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">render</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">,</span> <span class="nl">value</span><span class="p">:</span> <span class="bp">NSObject</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">key</span><span class="p">){</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;message&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">labelMessage</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">value</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;No implementation in render for key:\(key)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">func</span> <span class="n">getValue</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">key</span><span class="p">){</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;username&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">textFieldUsername</span><span class="p">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;password&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">textFieldPassword</span><span class="p">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">NSNull</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">func</span> <span class="n">goToPage</span><span class="p">(</span><span class="nl">pageName</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">pageName</span><span class="p">){</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;Home&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">performSegueWithIdentifier</span><span class="p">(</span><span class="s">&quot;HomeIdentifier&quot;</span><span class="p">,</span> <span class="nl">sender</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;No implementation in goToPage for page:\(pageName)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBAction</span> <span class="k">func</span> <span class="n">onLoginButtonPressed</span><span class="p">(</span><span class="nl">sender</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">eventable</span><span class="p">.</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="s">&quot;loginButtonPressed&quot;</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">showAlert</span><span class="p">(</span><span class="nl">alertMessage</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">UIAlertView</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Alert&quot;</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="n">alertMessage</span><span class="p">,</span> <span class="nl">delegate</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">cancelButtonTitle</span><span class="p">:</span> <span class="s">&quot;Okay&quot;</span><span class="p">).</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>You can clone/download the Example project from -> <a href="https://github.com/tapthaker/UnitTesting-UIViewControllers">my Github repo</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData - the Right Way, Part-I]]></title>
    <link href="http://tapthaker.github.io/blog/2015/04/09/coredata-the-right-way-part-1"/>
    <updated>2015-04-09T22:34:33+05:30</updated>
    <id>http://tapthaker.github.io/blog/2015/04/09/coredata-the-right-way-part-1</id>
    <content type="html"><![CDATA[<p><blockquote><p>“Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live”<br/>― John Woods</p></blockquote></p>

<p>If you don&rsquo;t know what&rsquo;s CoreData you are in the wrong place. I suggest you go through <a href="https://developer.apple.com/videos/wwdc/2010/">WWDC 2010</a> video
Mastering CoreData, before you proceed with the blog.</p>

<p>CoreData is easy to start off with but difficult to master, and the generated code that Apple provides when you create a new project with
CoreData doesn&rsquo;t help either. In the generated code project you will find methods like persistentStoreCoordinator, managedObjectContext, saveContext related to CoreData are being
implemented by the AppDelegate, which completely violates the <a href="http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html">Single Responsibility Principle</a>.
Methods related to setting up CoreData, upgrading CoreData , creating ManagedObjectContext etc should be present in a different class. This kind of
project is great to spike out things, but you never write this in production code.</p>

<p>If you are not convinced with my argument, try to answer the following questions -</p>

<ol>
<li>What would you do when you want to manage 2 different CoreData databases for 2 separate purposes ?</li>
<li>How could you TDD this kind of code when everything you need is inside AppDelegate  ?</li>
<li>Why is CoreData methods tied so tightly with something like AppDelegate ?</li>
<li>Why the hell do you have to type cast like the below every time you want to access the NSManagedObjectContext.
<code>objc
AppDelegate appDelegate = (AppDelegate*) [UIApplication sharedApplication].delegate
</code></li>
</ol>


<!-- more -->


<h2>Subclassing NSManagedObjectContext:</h2>

<p>According to me, NSManagedObjectContext should be created and passed along to different functions when needed. Using NSManagedObjectContext with singleton pattern (As suggested by
code generated by Apple) reduces the power that CoreData provides. Context is there so that you can create several at a time, use separate contexts in separate threads, discard a
context without saving it not needed, or merge a 2 or 3 contexts.</p>

<p>So, extracting methods out into a NSManagedObjectContext subclass will make things look something like this:</p>

<pre><code class="objc">@implementation TTManagedObjectContext

+(TTManagedObjectContext*)managedObjectContextForManagedObjectModel:(NSString*)momName andSqliteFileName:(NSString*)filename{
    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinatorForManagedObjectModel:momName andFilename:filename];
    TTManagedObjectContext *context = [[TTManagedObjectContext alloc]init];
    [context setPersistentStoreCoordinator:coordinator];
    return context;
}


+ (NSManagedObjectModel *)managedObjectModelForName:(NSString*)momName {

    NSURL *modelURL = [[NSBundle bundleForClass:[self class]] URLForResource:momName withExtension:@"momd"];
    if (modelURL == nil){
        NSLog(@"Could not find file:%@.momd",momName);
        abort();
    }
    NSManagedObjectModel *managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
    return managedObjectModel;
}

+ (NSPersistentStoreCoordinator *)persistentStoreCoordinatorForManagedObjectModel:(NSString*)mom andFilename:(NSString*)filename{

    NSPersistentStoreCoordinator *persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModelForName:mom]];
    NSError *error = nil;
    if (filename != nil) {
        NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:filename];
        [persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&amp;error];
    }else{
        [persistentStoreCoordinator addPersistentStoreWithType:NSInMemoryStoreType configuration:nil URL:nil options:nil error:&amp;error];
    }

    if (error) {
        NSLog(@"ERROR OCCURED:%@",error);
        abort();
    }

    return persistentStoreCoordinator;
}

+ (NSURL *)applicationDocumentsDirectory {
    return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
}

@end
</code></pre>

<p>Now you can write unit tests such as the following, plus your code is now modular and ready for re-use:</p>

<pre><code class="objc">- (void)setUp {
    [super setUp];
    logContext = [TTManagedObjectContext managedObjectContextForManagedObjectModel:@"Log" andSqliteFileName:nil];
    charactersContext = [TTManagedObjectContext managedObjectContextForManagedObjectModel:@"Characters" andSqliteFileName:nil];
// Note: SqliteFilename is nil which according to our new implementation makes in-memory db, so the unit tests now run faster
// and you do not need to worry about clearing the db after running the tests.
}


- (void)testSaveInCharacters {

    NSManagedObject *batman = [NSEntityDescription insertNewObjectForEntityForName:@"SuperHero" inManagedObjectContext:charactersContext];
    [batman setValue:@"Batman" forKey:@"name"];
    [batman setValue:@3 forKey:@"power"];
    [batman setValue:@5 forKey:@"brains"];
    NSManagedObject *superman = [NSEntityDescription insertNewObjectForEntityForName:@"SuperHero" inManagedObjectContext:charactersContext];

    [superman setValue:@"Superman" forKey:@"name"];
    [superman setValue:@5 forKey:@"power"];
    [superman setValue:@1 forKey:@"brains"];

    NSManagedObject  *log = [NSEntityDescription insertNewObjectForEntityForName:@"Log" inManagedObjectContext:logContext];
    [log setValue:@"Batman wins !!!" forKey:@"message"];
    [log setValue:@1 forKey:@"priority"];

    [charactersContext save:nil];
    [logContext save:nil];

    NSFetchRequest *fetchRequestCharacter = [[NSFetchRequest alloc]initWithEntityName:@"SuperHero"];
    NSFetchRequest *fetchRequestLog = [[NSFetchRequest alloc]initWithEntityName:@"Log"];

    NSArray *superHeros =  [charactersContext executeFetchRequest:fetchRequestCharacter error:nil];
    NSArray *logs = [logContext executeFetchRequest:fetchRequestLog error:nil];

    XCTAssertEqual(superHeros.count,2);
    XCTAssertEqual(logs.count, 1);
    XCTAssertEqual([logs[0] valueForKey:@"message"],@"Batman wins !!!");
}
</code></pre>

<p>This has really modularised things for us, in the next part we will look how can we take this even further.
You can find the full code on my github repo. <a href="https://github.com/tapthaker/CoreDataExample">CoreDataExample</a></p>
]]></content>
  </entry>
  
</feed>
