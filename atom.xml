<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stacktrace]]></title>
  <link href="http://tapthaker.github.io/atom.xml" rel="self"/>
  <link href="http://tapthaker.github.io/"/>
  <updated>2015-06-01T10:14:36+05:30</updated>
  <id>http://tapthaker.github.io/</id>
  <author>
    <name><![CDATA[Tapan Thaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing iOS UIViewControllers - the Advanced Way]]></title>
    <link href="http://tapthaker.github.io/blog/2015/05/30/unit-testing-ios-uiviewcontrollers-the-advanced-way"/>
    <updated>2015-05-30T18:44:43+05:30</updated>
    <id>http://tapthaker.github.io/blog/2015/05/30/unit-testing-ios-uiviewcontrollers-the-advanced-way</id>
    <content type="html"><![CDATA[<blockquote><p>“Am I suggesting 100% test coverage? No, I’m not suggesting it. I’m demanding it. Every single line of code that you write should be tested. Period.”<br/>― Uncle Bob</p></blockquote>


<p>I have already <a href="http://tapthaker.github.io/blog/2015/03/28/unit-testing-ioss-uiviewcontrollers/">written a post on this topic</a>, but after discussing with several colleagues
I have realized that the approach I was talking about might not be scalable. The approach discussed there relied on several hacks like <a href="http://nshipster.com/method-swizzling/">method swizzling</a> which though <strong>cool</strong> could cause some unexpected behaviour.
We were relying on the internal implementation of UIViewControllers which might change anytime when devs at Apple feel like. Plus that approach made us comfortable in writing core business logic inside
UIViewControllers instead of creating a ViewModels for them.</p>

<p>The approach I am going to describe here does not necessarily apply only to UIViewControllers. It can in fact be applied to any MVC pattern implementation. The problem with the current iOS implementation is that
the UIViewController is very tightly coupled with the UIView. So if you want to test a your logic when a particular UIButton is tapped you cannot do that without inflating the whole view hierarchy.</p>

<!-- more -->


<p>The idea is to separate the business logic from the UIViewController to something like <strong>BusinessLogicController</strong>.
The BusinessLogicController should have no reference of UIKit, thus making the code modular and platform independent.
Technically speaking, this means that we aren&rsquo;t testing the UIViewControllers, instead we are moving the core business
out of it into another layer.</p>

<p>The UIViewController implements the <strong>Controllable</strong> protocol which basically has a set of methods -</p>

<ol>
<li><strong>render</strong> : Called to paint something on the screen</li>
<li><strong>getValue</strong>: Called to get the value for a particular key</li>
<li><strong>showAlert</strong>: Optional, called to show an Alert</li>
<li><strong>goToPage</strong>: Optional, called to navigate to another page</li>
<li><strong>property eventable</strong>: To dispatchEvents to the BusinessLogicController</li>
</ol>


<p>The first 4 methods are called by the BusinessLogicController as and when required. The UIViewController
calls the dispatchEvent when a events like button clicked occur to let the BusinessLogicController know
about a particular event.</p>

<p>The BusinessLogicController implements <strong>Eventable</strong> which has the following:</p>

<ol>
<li><strong>dispatchEvent</strong>: called when a particular event like buttonPressed occurs</li>
<li><strong>property controllable</strong>: To call methods on the controllable whenever need be</li>
</ol>


<p>Lets take the example of Login. Lets say you have to code the following scenario -</p>

<ul>
<li>When the username &amp; password are correctly entered take the user to HomeVC.</li>
<li>If the credentials entered are incorrect display the message <em>&ldquo;Incorrect username or password&rdquo;</em>.</li>
<li>Also, if the user exceeds 5 attempts display an alert saying <em>&ldquo;Maximum number of retries exceeded&rdquo;</em>.</li>
</ul>


<p><img align="center" src="http://tapthaker.github.io/images/diagrams/UnitTestingVC-advanced.png" /></p>

<p>With the above criteria the LoginBusinessLogicController would look something like this -</p>

<figure class='code'><figcaption><span>[LoginBusinessLogicController] (LoginBusinessLogicController.swift)</span> <a href='http://tapthaker.github.io/downloads/code/LoginBusinessLogicController.swift'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">LoginBusinessLogicController</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span><span class="n">Eventable</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">controllable</span><span class="p">:</span> <span class="n">Controllable</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">var</span> <span class="n">numberOfAttempts</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="n">MAXIMUM_NUMBER_OF_ATTEMPTS</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">dispatchEvent</span><span class="p">(</span><span class="nl">eventName</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="bp">NSObject</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">eventName</span><span class="p">){</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;loginButtonPressed&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="n">checkLogin</span><span class="p">()</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;NO SUCH EVENT IMPLEMENTED\(eventName)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">checkLogin</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">numberOfAttempts</span> <span class="o">&lt;</span> <span class="n">MAXIMUM_NUMBER_OF_ATTEMPTS</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">getValue</span><span class="p">(</span><span class="s">&quot;username&quot;</span><span class="p">)</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">password</span> <span class="o">=</span> <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">getValue</span><span class="p">(</span><span class="s">&quot;password&quot;</span><span class="p">)</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">isCorrect</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="n">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">goToPage</span><span class="o">?</span><span class="p">(</span><span class="s">&quot;Home&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="nl">value</span><span class="p">:</span><span class="s">&quot;Wrong username or password&quot;</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">numberOfAttempts</span><span class="o">++</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">controllable</span><span class="o">?</span><span class="p">.</span><span class="n">showAlert</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;You have exceeded the maximum number of attempts, please try after sometime.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">isCorrect</span><span class="p">(</span><span class="nl">username</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span><span class="nl">password</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">username</span> <span class="o">==</span> <span class="s">&quot;batman&quot;</span> <span class="o">&amp;&amp;</span> <span class="n">password</span> <span class="o">==</span> <span class="s">&quot;bruce&quot;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the it conforms to the Eventable protocol, which declares the method <strong>dispatchEvent</strong>.</p>

<p>To test such BusinessLogicControllers, you can create a StubbedControllable and use that to send events. I am not going
to show the implementation of the StubbedControllable here because it will just bloat the code, if you really want to look
at that you can head on my <a href="https://github.com/tapthaker/UnitTesting-UIViewControllers">Github example repo</a>.
Lets look at how we could implement tests for this -</p>

<figure class='code'><figcaption><span>[LoginBusinessLogicControllerTests] (LoginBusinessLogicControllerTests.swift)</span> <a href='http://tapthaker.github.io/downloads/code/LoginBusinessLogicControllerTests.swift'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">XCTest</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">LoginBusinessLogicControllerTests</span><span class="p">:</span> <span class="n">XCTestCase</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">stubbedControllable</span><span class="p">:</span> <span class="n">StubbedControllable</span><span class="o">!</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">setUp</span><span class="p">()</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">businessController</span> <span class="o">=</span> <span class="n">LoginBusinessLogicController</span><span class="p">()</span>
</span><span class='line'>        <span class="n">stubbedControllable</span> <span class="o">=</span> <span class="n">StubbedControllable</span><span class="p">()</span>
</span><span class='line'>        <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">eventable</span> <span class="o">=</span> <span class="n">businessController</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">enterUsernameAndPassword</span><span class="p">(</span><span class="nl">username</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span><span class="nl">password</span><span class="p">:</span> <span class="n">String</span><span class="p">){</span>
</span><span class='line'>        <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">stubbedGetValue</span><span class="p">.</span><span class="n">updateValue</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;username&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">stubbedGetValue</span><span class="p">.</span><span class="n">updateValue</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;password&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="s">&quot;loginButtonPressed&quot;</span><span class="p">,</span> <span class="nl">eventValue</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">testLoginFailure</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">enterUsernameAndPassword</span><span class="p">(</span><span class="s">&quot;batman&quot;</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="s">&quot;joker&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">lastMessage</span> <span class="o">=</span> <span class="n">stubbedControllable</span><span class="p">.</span><span class="n">lastRender</span><span class="p">[</span><span class="s">&quot;message&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">lastMessage</span><span class="p">,</span> <span class="s">&quot;Wrong username or password&quot;</span><span class="p">,</span> <span class="s">&quot;Should render error message on incorrect password&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">testLoginSuccess</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">enterUsernameAndPassword</span><span class="p">(</span><span class="s">&quot;batman&quot;</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="s">&quot;bruce&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">stubbedControllable</span><span class="p">.</span><span class="n">lastPage</span><span class="o">!</span><span class="p">,</span> <span class="s">&quot;Home&quot;</span><span class="p">,</span> <span class="s">&quot;Should goTo Home when correct password is enterred&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">testMaximumNumberOfRetries</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="mf">.5</span><span class="p">{</span>
</span><span class='line'>            <span class="n">enterUsernameAndPassword</span><span class="p">(</span><span class="s">&quot;batman&quot;</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="s">&quot;joker&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">stubbedControllable</span><span class="p">.</span><span class="n">lastAlert</span><span class="o">!</span><span class="p">,</span> <span class="s">&quot;You have exceeded the maximum number of attempts, please try after sometime.&quot;</span><span class="p">,</span> <span class="s">&quot;Should alert if exceeded maximum number of attempts&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that neither the LoginBusinessLogicController nor its test is importing the UIKit module. The code written here
is independent of the iOS UIKit Framework which means the tests can run as a separately from the Simulator, faster in-parallel
if need be. As a bonus you can create a new iPad-App or Mac-App with the same BusinessLogicControllers wiring them with new ViewControllers.</p>

<p>I am pretty sure that by now you already have an idea of the LoginViewController&rsquo;s implementation</p>

<figure class='code'><figcaption><span>[LoginViewController] (LoginViewController.swift)</span> <a href='http://tapthaker.github.io/downloads/code/LoginViewController.swift'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">LoginViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span><span class="n">Controllable</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">eventable</span><span class="p">:</span> <span class="n">Eventable</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">labelMessage</span><span class="p">:</span> <span class="bp">UILabel</span><span class="o">!</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">textFieldUsername</span><span class="p">:</span> <span class="bp">UITextField</span><span class="o">!</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">textFieldPassword</span><span class="p">:</span> <span class="bp">UITextField</span><span class="o">!</span>
</span><span class='line'>    <span class="n">required</span> <span class="k">init</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">eventable</span> <span class="o">=</span> <span class="n">LoginBusinessLogicController</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">coder</span><span class="p">:</span> <span class="n">aDecoder</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">eventable</span><span class="p">.</span><span class="n">controllable</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">render</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">,</span> <span class="nl">value</span><span class="p">:</span> <span class="bp">NSObject</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">key</span><span class="p">){</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;message&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">labelMessage</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">value</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;No implementation in render for key:\(key)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">func</span> <span class="n">getValue</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">key</span><span class="p">){</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;username&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">textFieldUsername</span><span class="p">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;password&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">textFieldPassword</span><span class="p">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">NSNull</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">func</span> <span class="n">goToPage</span><span class="p">(</span><span class="nl">pageName</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">pageName</span><span class="p">){</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;Home&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">performSegueWithIdentifier</span><span class="p">(</span><span class="s">&quot;HomeIdentifier&quot;</span><span class="p">,</span> <span class="nl">sender</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;No implementation in goToPage for page:\(pageName)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBAction</span> <span class="k">func</span> <span class="n">onLoginButtonPressed</span><span class="p">(</span><span class="nl">sender</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">eventable</span><span class="p">.</span><span class="n">dispatchEvent</span><span class="p">(</span><span class="s">&quot;loginButtonPressed&quot;</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">showAlert</span><span class="p">(</span><span class="nl">alertMessage</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">UIAlertView</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Alert&quot;</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="n">alertMessage</span><span class="p">,</span> <span class="nl">delegate</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">cancelButtonTitle</span><span class="p">:</span> <span class="s">&quot;Okay&quot;</span><span class="p">).</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>You can clone/download the Example project from -> <a href="https://github.com/tapthaker/UnitTesting-UIViewControllers">my Github repo</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData - the Right Way, Part-I]]></title>
    <link href="http://tapthaker.github.io/blog/2015/04/09/coredata-the-right-way-part-1"/>
    <updated>2015-04-09T22:34:33+05:30</updated>
    <id>http://tapthaker.github.io/blog/2015/04/09/coredata-the-right-way-part-1</id>
    <content type="html"><![CDATA[<blockquote><p>“Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live”<br/>― John Woods</p></blockquote>


<p>If you don&rsquo;t know what&rsquo;s CoreData you are in the wrong place. I suggest you go through <a href="https://developer.apple.com/videos/wwdc/2010/">WWDC 2010</a> video
Mastering CoreData, before you proceed with the blog.</p>

<p>CoreData is easy to start off with but difficult to master, and the generated code that Apple provides when you create a new project with
CoreData doesn&rsquo;t help either. In the generated code project you will find methods like persistentStoreCoordinator, managedObjectContext, saveContext related to CoreData are being
implemented by the AppDelegate, which completely violates the <a href="http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html">Single Responsibility Principle</a>.
Methods related to setting up CoreData, upgrading CoreData , creating ManagedObjectContext etc should be present in a different class. This kind of
project is great to spike out things, but you never write this in production code.</p>

<p>If you are not convinced with my argument, try to answer the following questions -</p>

<ol>
<li>What would you do when you want to manage 2 different CoreData databases for 2 separate purposes ?</li>
<li>How could you TDD this kind of code when everything you need is inside AppDelegate  ?</li>
<li>Why is CoreData methods tied so tightly with something like AppDelegate ?</li>
<li>Why the hell do you have to type cast like the below every time you want to access the NSManagedObjectContext.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">AppDelegate</span> <span class="n">appDelegate</span> <span class="o">=</span> <span class="p">(</span><span class="n">AppDelegate</span><span class="o">*</span><span class="p">)</span> <span class="p">[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">delegate</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Subclassing NSManagedObjectContext:</h2>

<p>According to me, NSManagedObjectContext should be created and passed along to different functions when needed. Using NSManagedObjectContext with singleton pattern (As suggested by
code generated by Apple) reduces the power that CoreData provides. Context is there so that you can create several at a time, use separate contexts in separate threads, discard a
context without saving it not needed, or merge a 2 or 3 contexts.</p>

<p>So, extracting methods out into a NSManagedObjectContext subclass will make things look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">TTManagedObjectContext</span>
</span><span class='line'>
</span><span class='line'><span class="p">+(</span><span class="n">TTManagedObjectContext</span><span class="o">*</span><span class="p">)</span><span class="nf">managedObjectContextForManagedObjectModel:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">momName</span> <span class="nf">andSqliteFileName:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">filename</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">coordinator</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">persistentStoreCoordinatorForManagedObjectModel</span><span class="p">:</span><span class="n">momName</span> <span class="nl">andFilename</span><span class="p">:</span><span class="n">filename</span><span class="p">];</span>
</span><span class='line'>    <span class="n">TTManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TTManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">context</span> <span class="nl">setPersistentStoreCoordinator</span><span class="p">:</span><span class="n">coordinator</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSManagedObjectModel</span> <span class="o">*</span><span class="p">)</span><span class="nf">managedObjectModelForName:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">momName</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSURL</span> <span class="o">*</span><span class="n">modelURL</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="nl">bundleForClass</span><span class="p">:[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]]</span> <span class="nl">URLForResource</span><span class="p">:</span><span class="n">momName</span> <span class="nl">withExtension</span><span class="p">:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">modelURL</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Could not find file:%@.momd&quot;</span><span class="p">,</span><span class="n">momName</span><span class="p">);</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="bp">NSManagedObjectModel</span> <span class="o">*</span><span class="n">managedObjectModel</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL</span><span class="p">:</span><span class="n">modelURL</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="p">)</span><span class="nf">persistentStoreCoordinatorForManagedObjectModel:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">mom</span> <span class="nf">andFilename:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">filename</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithManagedObjectModel</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">managedObjectModelForName</span><span class="p">:</span><span class="n">mom</span><span class="p">]];</span>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">filename</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSURL</span> <span class="o">*</span><span class="n">storeURL</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">applicationDocumentsDirectory</span><span class="p">]</span> <span class="nl">URLByAppendingPathComponent</span><span class="p">:</span><span class="n">filename</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">persistentStoreCoordinator</span> <span class="nl">addPersistentStoreWithType</span><span class="p">:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">URL</span><span class="p">:</span><span class="n">storeURL</span> <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">persistentStoreCoordinator</span> <span class="nl">addPersistentStoreWithType</span><span class="p">:</span><span class="n">NSInMemoryStoreType</span> <span class="nl">configuration</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">URL</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;ERROR OCCURED:%@&quot;</span><span class="p">,</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">applicationDocumentsDirectory</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="bp">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">URLsForDirectory</span><span class="p">:</span><span class="n">NSDocumentDirectory</span> <span class="nl">inDomains</span><span class="p">:</span><span class="n">NSUserDomainMask</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can write unit tests such as the following, plus your code is now modular and ready for re-use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setUp</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">setUp</span><span class="p">];</span>
</span><span class='line'>    <span class="n">logContext</span> <span class="o">=</span> <span class="p">[</span><span class="n">TTManagedObjectContext</span> <span class="nl">managedObjectContextForManagedObjectModel</span><span class="p">:</span><span class="s">@&quot;Log&quot;</span> <span class="nl">andSqliteFileName</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">charactersContext</span> <span class="o">=</span> <span class="p">[</span><span class="n">TTManagedObjectContext</span> <span class="nl">managedObjectContextForManagedObjectModel</span><span class="p">:</span><span class="s">@&quot;Characters&quot;</span> <span class="nl">andSqliteFileName</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Note: SqliteFilename is nil which according to our new implementation makes in-memory db, so the unit tests now run faster</span>
</span><span class='line'><span class="c1">// and you do not need to worry about clearing the db after running the tests.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testSaveInCharacters</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSManagedObject</span> <span class="o">*</span><span class="n">batman</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName</span><span class="p">:</span><span class="s">@&quot;SuperHero&quot;</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">charactersContext</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">batman</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;Batman&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">batman</span> <span class="nl">setValue</span><span class="p">:</span><span class="mi">@3</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;power&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">batman</span> <span class="nl">setValue</span><span class="p">:</span><span class="mi">@5</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;brains&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSManagedObject</span> <span class="o">*</span><span class="n">superman</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName</span><span class="p">:</span><span class="s">@&quot;SuperHero&quot;</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">charactersContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">superman</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;Superman&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">superman</span> <span class="nl">setValue</span><span class="p">:</span><span class="mi">@5</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;power&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">superman</span> <span class="nl">setValue</span><span class="p">:</span><span class="mi">@1</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;brains&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSManagedObject</span>  <span class="o">*</span><span class="n">log</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName</span><span class="p">:</span><span class="s">@&quot;Log&quot;</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">logContext</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">log</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;Batman wins !!!&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;message&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">log</span> <span class="nl">setValue</span><span class="p">:</span><span class="mi">@1</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;priority&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">charactersContext</span> <span class="nl">save</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">logContext</span> <span class="nl">save</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSFetchRequest</span> <span class="o">*</span><span class="n">fetchRequestCharacter</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSFetchRequest</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithEntityName</span><span class="p">:</span><span class="s">@&quot;SuperHero&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSFetchRequest</span> <span class="o">*</span><span class="n">fetchRequestLog</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSFetchRequest</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithEntityName</span><span class="p">:</span><span class="s">@&quot;Log&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">superHeros</span> <span class="o">=</span>  <span class="p">[</span><span class="n">charactersContext</span> <span class="nl">executeFetchRequest</span><span class="p">:</span><span class="n">fetchRequestCharacter</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">logs</span> <span class="o">=</span> <span class="p">[</span><span class="n">logContext</span> <span class="nl">executeFetchRequest</span><span class="p">:</span><span class="n">fetchRequestLog</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">superHeros</span><span class="p">.</span><span class="n">count</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">logs</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">XCTAssertEqual</span><span class="p">([</span><span class="n">logs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;message&quot;</span><span class="p">],</span><span class="s">@&quot;Batman wins !!!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has really modularised things for us, in the next part we will look how can we take this even further.
You can find the full code on my github repo. <a href="https://github.com/tapthaker/CoreDataExample">CoreDataExample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing iOS's UIViewControllers]]></title>
    <link href="http://tapthaker.github.io/blog/2015/03/28/unit-testing-ioss-uiviewcontrollers"/>
    <updated>2015-03-28T20:46:47+05:30</updated>
    <id>http://tapthaker.github.io/blog/2015/03/28/unit-testing-ioss-uiviewcontrollers</id>
    <content type="html"><![CDATA[<blockquote><p>“All code is guilty, until proven innocent.” – Anonymous</p></blockquote>


<p>Unit tests are one of the corner stones of software development these days. But when it comes to writing unit tests for user interaction
like UIViewControllers we hardly write any mainly because we assume that we cannot simulate user interactions in unit tests. This post tries to
remove this misconception and shows how easily you could write unit tests for UIViewControllers.
For the rest of this post I will refer the UIViewController as view controller.</p>

<h2>Deprecated</h2>

<p>This method of unit testing UIViewControllers isn&rsquo;t probably the right way. Please refer to my other post <a href="http://tapthaker.github.io/blog/2015/05/30/unit-testing-ios-uiviewcontrollers-the-advanced-way/">Unit Testing iOS UIViewControllers - the Advanced Way</a> to know more
I am keeping this post just for the sake of reference and would suggest everyone to use the other <strong>non-hackable</strong> method to test things.</p>

<h2></h2>

<!-- more -->


<p>Some of the things to note before you start things:</p>

<ul>
<li>The view of the view controller needs to be loaded and wired properly before you simulate any interactions.</li>
<li>The interactions need to happen with the view elements, if on tapping the login button a selector onLoginClicked: is called then this does not mean
that you directly call that method from your unit test. You need to simulate that click instead.</li>
<li>For mocking &amp; stubbing objects in objective-C I highly recommend the framework <a href="http://ocmock.org/" title="Link to OCMock's official page">OCMOCK</a>.
You can use <a href="http://cocoapods.org/">cocoapods</a> to install OCMock.</li>
</ul>


<h2>Example</h2>

<p>Lets say we have a login view controller, which could have some simple scenarios like the following:</p>

<ul>
<li>If username &amp; password are correct then push a HomeVC.</li>
<li>If the username or password is incorrect then show an alert.</li>
</ul>


<p>Lets try writing a unit test for the first scenario.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testValidLogin</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Setting up things</span>
</span><span class='line'>    <span class="bp">UIStoryboard</span> <span class="o">*</span><span class="n">storyboard</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIStoryboard</span> <span class="nl">storyboardWithName</span><span class="p">:</span><span class="s">@&quot;Main&quot;</span> <span class="nl">bundle</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">LoginVC</span> <span class="o">*</span><span class="n">loginVC</span> <span class="o">=</span> <span class="p">[</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier</span><span class="p">:</span><span class="s">@&quot;ViewController&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">UINavigationController</span> <span class="o">*</span><span class="n">navigationController</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UINavigationController</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithRootViewController</span><span class="p">:</span><span class="n">loginVC</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">navControllerPartialMock</span> <span class="o">=</span> <span class="n">OCMPartialMock</span><span class="p">(</span><span class="n">navigationController</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="n">loginVC</span><span class="p">.</span><span class="n">view</span><span class="p">;</span> <span class="c1">// Wires up the view and other outlets and then calls the viewDidLoad method.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Setting up expections</span>
</span><span class='line'>    <span class="n">OCMExpect</span><span class="p">([</span><span class="n">navControllerPartialMock</span> <span class="nl">pushViewController</span><span class="p">:[</span><span class="n">OCMArg</span> <span class="n">any</span><span class="p">]</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Run code under test</span>
</span><span class='line'>    <span class="n">loginVC</span><span class="p">.</span><span class="n">textFieldUsername</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;brucewayne&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">loginVC</span><span class="p">.</span><span class="n">textfieldPassword</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;i am batman&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">loginVC</span><span class="p">.</span><span class="n">buttonLogin</span> <span class="nl">sendActionsForControlEvents</span><span class="p">:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Verifying the expectations</span>
</span><span class='line'>    <span class="n">OCMVerifyAll</span><span class="p">(</span><span class="n">navControllerPartialMock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test is pretty straight forward. One of the things to note is that accessing <strong>loginVC.view</strong> is necessary.
The view property of the view controller is loaded lazily when the view is accessed for the first time.
It is this time that iOS reads the XML present in the storyboard / xib and adds the views accordingly.
Without this the IBOutlets and their parent view will be nil.</p>

<p>Lets now see the implementation of our loginButtonTapped method to understand how to test the second scenario:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">loginButtonTapped:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">textFieldUsername</span><span class="p">.</span><span class="n">text</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;brucewayne&quot;</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">textfieldPassword</span><span class="p">.</span><span class="n">text</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;i am batman&quot;</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">HomeVC</span> <span class="o">*</span><span class="n">homeViewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">HomeVC</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">homeViewController</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[[</span><span class="bp">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;Incorrect&quot;</span> <span class="nl">message</span><span class="p">:</span><span class="s">@&quot;Incorrect username or password&quot;</span> <span class="nl">delegate</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">cancelButtonTitle</span><span class="p">:</span><span class="s">@&quot;Ok&quot;</span> <span class="nl">otherButtonTitles</span><span class="p">:</span> <span class="nb">nil</span><span class="p">]</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A test for this could be to expect a UIAlertView on the screen when you enter incorrect username or password. The problem here is that
you don&rsquo;t have the access to UIAlertView&rsquo;s object to stub it. Of course you could do dependency injection here, but it doesn&rsquo;t make much sense mainly because the view controllers in
iOS aren&rsquo;t initialized that way. Luckily ObjC with its message passing can do some magic at runtime, enter the world of
<strong>method swizzling</strong>. Method swizzling is mainly about replacing a method&rsquo;s implementation with some other implementation. There is a <a href="http://nshipster.com/method-swizzling/">great post on NSHipster</a>
about this. I will be using a 3rd party lib to swizzle methods called <a href="https://github.com/rbaumbach/Swizzlean" title="Github page for Swizzlean">Swizzlean</a>,
its not necessary but it makes things simpler to work with. Lets now look at the test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testInvalidLogin</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Setting up things</span>
</span><span class='line'>    <span class="bp">UIStoryboard</span> <span class="o">*</span><span class="n">storyboard</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIStoryboard</span> <span class="nl">storyboardWithName</span><span class="p">:</span><span class="s">@&quot;Main&quot;</span> <span class="nl">bundle</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">LoginVC</span> <span class="o">*</span><span class="n">loginVC</span> <span class="o">=</span> <span class="p">[</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier</span><span class="p">:</span><span class="s">@&quot;ViewController&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="n">loginVC</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Method swizzling</span>
</span><span class='line'>    <span class="k">__block</span> <span class="kt">BOOL</span> <span class="n">alertViewShown</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Swizzlean</span> <span class="o">*</span><span class="n">swizzle</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Swizzlean</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithClassToSwizzle</span><span class="p">:[</span><span class="bp">UIAlertView</span> <span class="k">class</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">swizzle</span> <span class="nl">swizzleInstanceMethod</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">show</span><span class="p">)</span> <span class="nl">withReplacementImplementation</span><span class="p">:</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">alertViewShown</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Run code under test</span>
</span><span class='line'>    <span class="n">loginVC</span><span class="p">.</span><span class="n">textFieldUsername</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;brucewayne&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">loginVC</span><span class="p">.</span><span class="n">textfieldPassword</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Why so serious?&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">loginVC</span><span class="p">.</span><span class="n">buttonLogin</span> <span class="nl">sendActionsForControlEvents</span><span class="p">:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Asserting</span>
</span><span class='line'>    <span class="n">XCTAssertTrue</span><span class="p">(</span><span class="n">alertViewShown</span><span class="p">,</span><span class="s">@&quot;Show show Alert View when the invalid login&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">swizzle</span> <span class="n">resetSwizzledInstanceMethod</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resetSwizzledInstanceMethod is also important or it might break some other tests that you have written.Method swizzling is a
powerful technique when you need it, but should be used sparingly.</p>

<p>Unit testing is often neglected but it is, in fact, the most important level of testing, just be careful not
to over engineer things.</p>
]]></content>
  </entry>
  
</feed>
